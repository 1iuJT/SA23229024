% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_p_value.R
\name{simulate_p_values}
\alias{simulate_p_values}
\title{Simulate P-Values and Compare Correction Methods}
\usage{
simulate_p_values(
  m = 1000,
  M = 1000,
  pvalue_distribution_null = runif,
  dist_params_null = list(0, 1),
  pvalue_distribution_alt = rbeta,
  dist_params_alt = list(0.1, 1),
  alpha = 0.1
)
}
\arguments{
\item{m}{Integer; total number of hypotheses (default 1000).}

\item{M}{Integer; number of simulations to perform (default 1000).}

\item{pvalue_distribution_null}{Function; a function to generate p-values
under the null hypothesis (default is `runif`).You can use some function,
such as rbeta  rf rt rexp rnorm.}

\item{dist_params_null}{List; list of parameters to pass to the null
distribution function (default is `list(0,1)`).}

\item{pvalue_distribution_alt}{Function; a function to generate p-values
under the alternative hypothesis (default is `rbeta`).You can use some function
 different from the null hypothesisï¼Œsuch as runif  rf rt rexp rnorm.}

\item{dist_params_alt}{List; list of parameters to pass to the alternative
distribution function (default is `list(0.1,1)`).}

\item{alpha}{Numeric; significance level used to decide if a p-value indicates
a statistically significant finding (default 0.1).}
}
\value{
A matrix with average FWER, FDR, and TPR for Bonferroni and BH
        correction methods across all simulations.
}
\description{
This function simulates p-values under the null and alternative hypotheses,
then applies Bonferroni and Benjamini-Hochberg (BH) correction methods to
assess True discovery rate(TDR), true positive rate (TPR),false discovery rate (FDR),
family-wise error rate (FWER), and F1_score. It repeats the simulation 'M' times and
returns the average metrics for each correction method.
}
\details{
This function simulates p-values under the null and alternative hypotheses.
}
\examples{
\dontrun{
set.seed(123) # for reproducibility
result <- simulate_p_values(m = 1000, M = 1000, pvalue_distribution_null = runif,
                           dist_params_null = list(min = 0, max = 1),
                           pvalue_distribution_alt = rbeta,
                           dist_params_alt = list(shape1 = 0.1, shape2 = 1),
                           alpha = 0.1)
result
}
}
